// Code generated for package utils by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/go/.dockerignore.tmpl
// templates/go/.gitlab-ci.yml.tmpl
// templates/go/Dockerfile.tmpl
// templates/go/compose.yaml.tmpl
// templates/go/configmap.yaml.tmpl
// templates/go/deployment.yaml.tmpl
// templates/go/ingress.yaml.tmpl
// templates/go/service.yaml.tmpl
package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DockerignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\xee\xd3\x30\x0c\xc6\xef\x7d\x0a\x4b\x3d\x00\xd5\x96\xde\xb9\x21\x36\xa4\xbf\x04\x1c\xd8\x03\xfc\x95\x3a\x5e\x9b\x91\xc4\x95\xe3\x14\xfa\xf6\x28\xe9\x90\x76\xfa\xfc\xf9\xf3\xcf\x75\xd3\xc3\x5b\xc2\x50\x1c\x81\x4d\x3b\xdc\x7d\xa0\x0c\x2c\xe0\xbc\x10\x2a\x8b\xa7\x0c\xba\x58\x85\x9d\x0b\x38\x4e\x1f\x14\xfe\xd8\xa4\xa0\x0c\x13\x01\xf2\xea\xc9\x55\xb3\x73\x91\xae\x07\xe4\xa4\xd6\x27\x12\x58\x48\x08\x3e\x92\x99\xcd\x09\x02\xa3\x0d\x30\x15\x1f\x1c\x58\x51\x7f\xb7\xa8\xf9\x04\x4a\x71\x65\xb1\xf2\xfc\xec\x09\x48\xd1\x7c\x32\x5d\xdf\xf5\xf0\x8d\x05\x22\x0b\xc1\x42\x61\x3d\xc1\xe6\xb3\x57\xd0\x85\xc0\x38\xc6\xdf\x24\x7e\x4e\x35\xad\x20\x08\xdd\x49\x28\x21\xc1\x5c\x7c\xfd\x11\xed\x7a\x58\x54\xd7\xfc\x79\x1c\x1d\x63\x7e\x32\x06\x39\x8e\x33\x8f\xed\x90\x73\x3d\x95\xfe\xea\xf9\x75\xdf\xd8\x75\xc3\x30\x9a\xcb\xed\xfd\xa6\x2c\xd4\x0c\x06\x9b\xf3\x6a\x75\x69\xee\x75\xba\x35\x28\x6d\x4d\x67\xaf\xff\xf5\x25\x5d\x85\x1f\x84\x47\x92\x49\xd5\xa7\x39\x37\xa3\xcc\x21\xab\x95\x99\x8e\x70\xcb\x4f\x41\x76\x0d\x1d\xcc\x50\x61\x53\x32\xc9\xe1\xdd\x14\x5d\x38\xca\xc7\x3d\xd6\x62\xf2\xa9\x0a\x2e\x56\xb4\xf1\xc7\x75\x67\xe4\xb8\x72\xa6\xa1\x85\x47\x6d\xf6\x21\x36\xf8\xd2\x46\xea\xbb\xb5\x38\xb1\xa3\xf7\xc8\xae\x04\x6a\x1b\xd2\x1a\xcf\x8e\xa6\x32\x9b\xc0\x73\x6d\xf0\xf4\xa8\x92\x09\x85\x34\x1b\x47\x9b\xd9\xed\xb1\x6a\xb3\xa1\xd0\x4b\xeb\xfb\xdb\xd7\xeb\xcf\xdb\xb5\xfb\x75\xfd\x72\xf9\x71\x35\xd1\x75\xff\x02\x00\x00\xff\xff\x24\x27\x97\x3a\x5d\x02\x00\x00")

func DockerignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerignoreTmpl,
		".dockerignore.tmpl",
	)
}

func DockerignoreTmpl() (*asset, error) {
	bytes, err := DockerignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".dockerignore.tmpl", size: 605, mode: os.FileMode(438), modTime: time.Unix(1753082419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _GitlabCiYmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x51\x6b\xdb\x3c\x14\x7d\x2f\xf4\x3f\x5c\x4c\x3e\xfa\x8d\x62\x1b\xf6\x68\xd8\x98\x97\x78\x99\x57\x12\x07\x25\xed\x18\x14\x8c\x62\xcb\xae\xa8\x2c\x19\x59\xce\x16\x4c\xfe\xfb\x90\x2c\x3b\x4e\x5a\xf6\x52\x6e\x75\xcf\xb9\xf7\xf8\xe8\x28\x8d\xc2\x25\x69\x82\xdb\x1b\x00\x17\x18\xe5\xaa\xaf\x14\x69\x6c\xb5\x6f\x29\xcb\xfb\x32\x17\xd9\x2b\x91\xba\xee\x3a\x17\x68\x01\x5e\xc4\xf1\x9e\x91\x05\xa9\x99\x38\xc2\xe9\x64\x61\xe6\xdf\x01\x46\x78\x6e\x3a\xb7\x37\x07\x2c\xa9\x86\xf7\xdb\xc2\xcd\x26\x5d\x87\xab\x28\x00\xa7\xeb\xc0\x0b\xeb\x7a\x8d\x2b\x02\xa7\x93\xa3\xbb\xcb\x24\x7d\x8a\xd0\x36\x4e\xd6\xb6\xbf\x14\x4f\x44\x36\x54\xf0\x01\xb1\x48\xe6\x0f\x11\x4a\x51\xb4\x8c\xb7\x3b\xf4\xcb\xc2\x16\x46\x22\x22\x25\x6d\x94\x3c\x0e\xd8\x78\x15\x2e\xa3\x74\x17\x2e\x03\x70\x66\xf3\x38\x9d\x27\xab\x55\xbc\x4b\xb7\xdf\x13\xa4\xff\x86\x8e\x96\x97\x93\x02\xb7\x4c\x19\x71\xb4\xc2\x25\x09\xa0\x14\x0c\xf3\x32\xb8\xde\xaf\xd1\x7b\x52\x08\x49\xd2\x26\x93\xb4\x56\xd6\xbe\x52\x40\x25\x72\x50\x34\x3f\x6a\x88\x76\xd3\x74\x8c\xc7\xc1\xe8\xee\x84\x63\x59\x94\x37\x0a\x33\x06\x25\x55\x2f\xed\xde\xcb\x44\xe5\xf7\xab\x33\x3a\x16\xae\xa6\xfb\x59\x95\x5f\x9e\x7c\x61\x78\xb8\xab\x7e\xd8\xa4\x07\xb2\xe5\xe0\xf9\x9e\xe7\xe9\x36\x66\x4c\xfc\x4e\x0b\x4c\x59\x2b\x49\x00\x05\x66\x0d\xd1\x32\x35\x7d\x2a\x73\x18\xf7\x56\xa6\xee\x80\x7b\x38\x8f\xcc\xc4\x81\x48\x43\xba\xf3\xcf\xf5\xff\xcf\xf9\xfd\xb3\xf7\x9c\xdf\x7f\xf8\xcf\xbf\x33\x5e\xe9\x08\x4d\x57\x8c\x99\x7a\xbb\xc3\xb4\xf4\x12\x57\xc0\x65\x2e\xc0\x33\xb7\x64\x2e\x78\x3a\xec\x9c\x4a\x7b\x6b\x16\x72\x36\xa6\x21\xf2\x40\x33\x9b\xbb\x73\x90\x83\x9c\x72\xa3\xe2\x32\x98\x63\xb4\x16\x28\x7e\x8a\x50\x00\xfa\xc3\x18\x3e\x7e\x7c\x47\x70\x3f\x08\x98\x28\x29\x07\xb7\xed\xd3\x35\x44\x32\x7d\xdc\x46\xc8\x01\xb7\xbe\x3a\xde\x84\xdb\xed\xcf\x04\x2d\x1c\x98\x1e\x5f\x8d\xb4\x3e\x28\x98\x5d\x07\x7d\x36\xa6\x19\xbc\x2b\x52\xdd\x36\x2f\xff\x22\x68\x03\xbb\xee\xfd\x97\xdb\xbf\xda\x0b\x63\xc7\x77\x6c\x8d\xdd\x53\xc5\x71\x45\xfd\xd7\x76\x4f\x32\xc5\xa6\x0e\x5f\xda\x42\xb2\x17\x01\xce\xec\xe1\xf1\x6b\x94\xce\x93\xf5\xb7\x78\xe9\xc0\x67\x30\x34\xc1\x0b\x5a\x8e\xb8\x3f\xb5\x90\x0a\x34\xae\x87\x7d\xd2\x8e\x6c\x50\xf2\x23\x9a\xef\xd2\x45\x8c\xfc\xb7\x1c\xbb\x1c\x70\x5d\xb3\x23\xb8\x05\x50\x5e\x48\xec\xeb\xb6\xe0\xec\x38\x6a\xa8\x30\xe5\xe6\x6b\x87\x1f\xa0\xbf\x01\x00\x00\xff\xff\x55\xdb\xb8\x2d\xea\x04\x00\x00")

func GitlabCiYmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_GitlabCiYmlTmpl,
		".gitlab-ci.yml.tmpl",
	)
}

func GitlabCiYmlTmpl() (*asset, error) {
	bytes, err := GitlabCiYmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitlab-ci.yml.tmpl", size: 1258, mode: os.FileMode(438), modTime: time.Unix(1753000080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerfileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xed\x6e\xdb\x38\x16\xfd\xaf\xa7\xb8\xb0\x83\xee\x16\x88\x24\x3b\x4d\x1a\x27\x80\xb1\x9b\x0f\x37\x35\x9a\xc6\x81\x93\x6c\xb7\xd8\x1d\x14\x14\x79\x25\x71\x22\x91\x2a\x49\xd9\xf1\x14\x05\xe6\x35\xe6\xf5\xe6\x49\x06\x97\xf4\x67\xa7\x98\xf6\xc7\x34\x7f\x62\x91\xbc\xbc\x87\xe7\x1e\x9e\xcb\x2e\xd8\x85\x72\xec\x69\x28\x34\x7f\x44\x93\x86\x7f\xb9\xac\xf0\xb4\x1f\x45\x5d\xb8\xd0\x75\x8d\xca\x59\x60\x06\xa1\x31\x7a\x26\x05\x0a\x70\xa5\xd1\x6d\x51\xea\xd6\x81\x2b\xa5\x05\x5a\x0f\x4e\x43\x89\x55\x03\x0b\xdd\x42\x81\x0e\xac\x63\xc6\xa1\x48\xa2\x2e\x8c\x73\x3f\xaa\x10\x05\xd4\xda\xa0\x5f\xb8\x0f\x33\x69\x25\xed\x80\x70\xb9\x4e\x0b\x06\x73\x34\xa8\x38\x42\xd1\x4a\x81\xc0\x5c\xd4\x85\xd2\xb9\xc6\x9e\xa6\x04\xcf\x26\x01\x63\xc2\x75\x9d\x16\x7a\x0b\x71\xbc\x0e\x4d\x09\xfa\x3b\xa6\xdc\x1a\x54\x6b\xa1\x66\x8f\x18\xe0\x3a\xac\x9b\x8a\x39\x84\x0c\x9d\x43\xf3\x2f\xb8\x2b\xe9\x78\x0b\xdd\x1a\xc8\x11\x45\xc6\xf8\x23\x94\x68\xf0\x74\x9d\x38\xd7\xa6\xb6\x49\x51\x61\xba\xc8\x3e\x9e\xbc\x31\x6e\xf0\xb3\x3b\xbf\x7e\x21\x2f\x1e\x8f\xa3\xa8\xfb\x37\xff\x11\xef\x06\x09\x20\x23\x16\x0b\x84\x5c\x1b\xc8\x5a\x59\x09\xa9\x0a\x4f\x18\x6b\x9a\x4a\x72\xe6\xa4\x56\x49\x74\x36\xbd\x82\xab\xc9\x87\xff\x8c\xa6\x77\xe3\xc9\xcd\xb0\x9f\x1c\xf4\xa3\x57\xd3\xc9\x5b\x88\x63\x3a\x27\x61\x1f\xee\x9d\x3f\x8c\xaf\x2f\x6f\xaf\xcf\xee\x5f\x4d\xa6\x6f\xa1\xd0\x15\x53\xc5\xe9\xde\xa7\x4d\xdc\x67\x38\xbb\x0b\x49\xa2\x77\x93\xe9\x9b\xcb\xf1\x14\x52\x6b\x38\x51\x79\xa9\xe7\xaa\xd2\x4c\x80\xc0\x06\x95\x40\xc5\x25\x5a\x60\x96\xf0\x61\xc3\x0c\x41\xb5\x0e\x1b\xa2\xdb\x11\xcd\x4c\xcc\x98\xf2\xc8\x75\xbe\x2c\xee\x3f\x2c\x70\xc6\x4b\xa9\x0a\x52\xc4\x35\xce\xd0\xd0\x3c\xf3\xa3\x08\xb5\x6e\x43\xb9\xa8\xa6\xcd\x63\x91\xd6\x5a\xa4\xf4\x6d\x1b\x52\x4d\xdb\x80\x6d\x33\x8b\x1f\x5b\x54\x2e\xa0\xb4\x3b\xfb\x64\x52\x89\xb0\x89\xa5\xa8\x42\x27\xb6\xad\x81\x29\x41\x3f\x6b\x2d\x68\x90\xcd\xb4\x14\x50\xb2\x99\x67\x51\x03\xd7\xcd\x82\xd8\xac\x41\x2a\xa7\xa3\xae\x67\x96\x6b\xe5\x98\x54\x68\x92\x68\xfa\x70\x03\x71\xec\x37\x1d\xba\x45\x83\x43\x0f\x75\xdf\x31\x53\xa0\x1b\xee\x00\xfd\x7f\x04\x00\xbb\x8b\x09\xd1\xbe\xd5\xad\xe1\x38\x0c\x70\x56\x91\x4b\x70\xdf\x8e\xa9\xb5\xd8\x8a\xa1\x53\x84\x98\x42\x03\x7d\x88\x55\x59\xe2\x27\xaa\xd2\x3d\x69\x9b\xe4\x4d\xfa\x30\xbc\x94\x0e\xb9\x6b\x83\xb0\x7f\xff\xf5\x37\x83\x1b\x09\xe5\xda\xec\xc3\xbc\x94\xbc\xa4\x80\x86\x59\x8b\x02\xa4\x82\xcc\xf3\x11\xd6\x11\x03\x5d\xb8\xad\x18\xa7\x08\xe9\xfc\x8d\x00\x56\x55\x7a\x1e\x72\x34\x06\x67\x52\xb7\xd6\x97\xde\xb3\x9e\x61\xa8\xa6\x00\xc6\x8d\xb6\x76\x07\x86\x0d\x42\xbd\x3f\x9b\x5e\x8d\xee\xcf\xa6\x17\xaf\x09\xf3\x39\x65\xfa\xb3\xa2\x7f\x80\x40\xd8\x96\x44\xbc\x4e\xa9\xd6\xad\x31\xb4\x5c\x48\x83\xdc\x69\xb3\xf8\x2b\x95\x44\x5d\x08\x95\x01\xae\x05\x7a\xc9\xfc\x00\xc1\x2c\xd7\x26\xcb\x05\x17\x57\x93\x0f\xa3\x9b\xb3\xf3\xeb\xd1\xe5\xb0\x07\x57\x13\xe2\x6d\xb8\xb7\xe1\x90\xa4\xe0\x0f\x0b\xb1\x86\x34\x93\x2a\xb5\x68\x66\x68\x20\xf9\xb1\xb6\xa4\x70\xbe\x65\x4d\xa6\x55\xea\x2b\xce\x04\xae\x64\x6e\xc5\x4f\xd0\x4c\x2d\x95\xac\x59\x15\x75\x29\xc6\xc9\x1a\x77\x2d\x85\x36\xfb\x52\x0c\x41\xd7\x3a\x77\xa8\xa0\xb5\xe4\x3b\x20\x64\xee\x9d\xde\x41\xc6\x2c\x15\x46\xd6\x1e\x8a\xd1\xf5\x46\xbf\x4b\x7c\x73\x2f\x5b\x1a\x55\xc8\xd1\x5a\x66\x16\xbe\x5f\x85\x96\xc6\x75\x23\x51\x7c\x11\x49\x95\xa6\xd8\x24\xea\xfa\x6b\x85\x80\x4f\xac\x6e\x2a\x6a\x18\x95\x9e\x07\x14\x1e\x66\xd5\x48\x85\xcb\xec\x2c\x8c\xe5\xba\x55\x22\x1c\xff\x2b\xd4\x90\x24\xcf\x17\xa4\x59\x2e\xf3\xc5\x6a\xa2\x43\xdd\xc8\xba\x0e\x38\x56\xec\xd3\x55\x9b\xcb\xaa\x02\x56\x59\x4d\xb9\x60\x5e\x32\x47\x32\x86\x92\x35\x0d\xaa\xd5\x55\x0b\x9a\xac\xb5\x75\x60\x90\x13\x1b\x33\x34\x96\x12\xeb\x3c\x50\x1f\x80\xcd\x4b\x54\xbe\xff\x06\x5a\x7c\x9b\xdb\x34\xdc\x04\xc6\x39\x95\x03\x1b\xa3\x45\xcb\x59\x26\x2b\xe9\x16\x64\x0b\xb2\x6e\xb4\x71\x4c\xb9\x7d\xaa\xa1\x95\x02\x0d\xb4\x96\x30\xb3\x55\x26\x7a\x0b\xb0\x22\xea\xc2\x3f\x31\x29\x92\xfd\x25\x21\xa7\x2f\x92\xfe\x71\x72\xf0\x1c\xb4\x81\xbb\xd7\x67\xbb\x93\xff\xb6\x25\x3b\x38\x7a\x79\xca\x0f\xfb\x2c\x3b\xe2\x27\x27\x07\x02\xb3\xc3\x1c\x8f\xf1\x48\xb0\xde\x49\xfe\xf2\x98\x0d\x06\xbd\x43\x76\xf8\x32\x13\xbd\xa3\x93\x83\x2c\x17\x79\x2f\xeb\x0f\x0e\x8f\x85\xc0\x1e\xf6\x06\x83\x13\x71\x90\xe5\xf9\xf3\x24\xf4\xb8\x65\xca\xc0\x20\xb5\xb0\x5c\x2a\x56\x91\xb7\x8c\x95\x75\x8c\x78\x54\x8b\xaf\xab\xcd\x73\x44\x2a\xa0\x87\x09\xfa\x16\x61\x5a\x15\x08\xfa\x7e\x3b\x9a\x31\x93\xfa\xb1\x94\x35\x8f\xdf\x74\xa4\x6f\x58\xc4\xce\x66\x4b\x0f\xa0\x5f\x71\xdc\x36\xc2\x5f\x3d\xb1\x6a\x02\xf4\xc7\x59\xcc\xd1\x38\x99\x13\x54\xb4\x5b\x33\xee\x17\xc1\x1c\xdb\x1a\x78\xf6\x6c\xeb\x23\x6c\x16\x7f\x11\x1e\xed\xdc\x70\xad\xe2\xc6\xc8\x99\xac\xb0\xa0\xd3\x58\x34\x81\xb0\xa5\x92\x83\x46\x89\xaf\x56\x2d\x7b\xc5\x1d\xe2\x77\xbe\xd4\x68\xb7\x38\x43\xeb\xe2\xc6\x30\xee\x24\x47\x9b\xfa\xee\xf0\x30\xbe\x1c\xf6\x7b\xbd\x5e\xdf\x13\xc5\x84\xf0\x79\x57\x66\x29\xa4\x65\x59\x85\x22\xa6\x8e\x35\xd7\x46\xac\x67\x0a\xe4\xda\x42\xa7\xb3\x1e\x28\x75\x8d\xd0\x49\x95\x56\xf8\x24\xad\x43\xe5\x36\x73\xb6\xc4\xaa\x82\x4e\x6a\xc9\x2f\x95\xae\x74\x21\xd5\x66\x56\xe9\x98\x7b\x12\xc2\x1e\xab\xe1\x56\x0a\xe8\xec\x7d\x7a\x18\x5f\x7e\xee\xac\x0b\xd3\x10\xbc\xe8\xe1\x6e\x34\x5d\x7f\xf8\x47\x73\xe8\x18\x80\x4f\xc8\x5b\x47\x90\x37\x0e\xd3\xf1\x4a\xe8\xac\x1c\xe6\x62\x72\xfb\x1e\xe2\x98\xa6\x87\xe1\x7e\x6e\xbb\xb8\xff\x4d\x5b\x8e\x9e\x1a\x6d\x83\x8d\xd1\xa5\xdc\xa9\xc4\xda\x6e\x2b\x7f\x50\x0b\x24\xd9\xd1\x7f\x6f\x27\x77\x23\x18\xf4\x06\x3d\xff\x18\x5e\xad\x5f\x77\x2b\xb0\xa5\x6e\x2b\xe1\x2b\xe8\x1d\x42\x3a\xba\xf4\xeb\x57\xfb\xe8\xe6\x7e\xfa\xfe\x76\x32\xbe\xb9\x87\xff\x41\x67\x0b\x54\x07\x7e\x8a\xfe\x08\x00\x00\xff\xff\x32\xff\x24\x40\x37\x0c\x00\x00")

func dockerfileTmplBytes() ([]byte, error) {
	return bindataRead(
		_dockerfileTmpl,
		"Dockerfile.tmpl",
	)
}

func dockerfileTmpl() (*asset, error) {
	bytes, err := dockerfileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dockerfile.tmpl", size: 3127, mode: os.FileMode(438), modTime: time.Unix(1752999841, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _composeYamlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\xd1\x8e\xdb\x36\x13\x85\xef\xf5\x14\x07\xf6\xed\xda\xda\xff\x6f\x17\x08\x04\xe4\x22\xcd\x26\x6d\x80\x14\xd9\x66\x03\x14\x45\x51\xac\x69\x72\x2c\x11\x91\x48\x75\x66\x64\xaf\xdf\xbe\x20\x25\xad\x55\x6f\x7d\x61\x50\xc3\x33\xc3\x99\x8f\x47\x5a\xe3\x7d\xec\x3a\x0a\x2a\x30\x4c\xe8\x39\x1e\xbd\x23\x07\x6d\x38\x0e\x75\x13\x07\x85\x36\x5e\x70\xf0\x2d\x41\x23\x1a\x6a\x7b\x9c\xe3\x80\x9a\x14\xa2\x86\x95\xdc\xb6\x58\xe3\xd3\x21\x47\x03\x91\x43\x17\x99\xb2\xf0\x06\x47\x2f\x3e\x55\x20\xdc\x47\xfb\x9d\x38\x9d\xd6\x47\x21\x30\x1d\x88\x29\x58\x42\x3d\x78\x47\x30\x5a\xac\xd1\xa8\xf6\x52\x95\xa5\x8b\x56\xb6\x2e\x27\x6c\x6d\xec\xca\x3a\x96\x76\xcc\xdb\x48\x4f\x76\xf3\x92\x5c\x16\xc5\x1a\xbf\x10\x53\x3e\xc2\x07\x51\x1e\xac\xfa\x18\x04\x8e\x0e\x3e\x50\x6a\x8a\x61\xfa\xbe\xf5\xd6\xa4\x0d\x18\x81\x81\x10\x1f\xbd\x25\x58\xd3\xb6\xe4\xb0\x4a\xcf\xc4\xab\x34\xc8\xb7\x34\xed\xbc\xef\x05\xfb\xc1\xb7\x8a\x03\xc7\x6e\x31\x46\xa6\xe1\x43\x8e\xd8\x81\x99\x82\xc2\x79\x26\xab\x91\xcf\xa9\xca\x1f\x71\x80\x35\x01\xc6\x39\x44\x6d\x88\xe7\x92\xf2\xba\xa3\xce\x9c\xe1\xa8\xa7\xe0\x10\x03\x1a\x62\xba\x81\x0c\xb6\xc9\xad\x16\x6b\x38\xa3\x66\x6f\x84\x10\x19\x06\xd6\xd8\x86\xb6\xf8\x18\x19\xf4\x6c\xba\xbe\x25\xb9\x81\xd0\x48\xe0\xdd\x89\x24\x76\xb4\xa0\xdc\x47\xf1\xa9\xa9\x6a\x81\xb7\xf6\xda\x0c\xfb\x4c\x76\x84\x5c\x9a\x31\x6f\x33\x51\x2e\xe6\x66\xab\x02\x18\xd9\xa4\x15\x32\x0c\x37\x2e\x01\x1b\x83\xd2\xb3\x56\xd8\x4e\x01\x35\x5c\x93\x56\x38\xf8\x60\xda\x1c\xeb\x23\xab\xcc\xfa\x0d\xde\xdc\xbe\xb9\xad\xd2\x5f\x91\x41\x13\xec\xe8\x3d\x72\x48\x46\x13\xca\x77\x87\x3d\xb5\xf1\x94\xd8\x9b\x30\xcf\x88\x78\x40\x13\x4f\xc9\x81\xd3\xc5\x1a\x3c\x44\xd1\x9a\xe9\xf1\xb7\xcf\x4b\x48\xda\x18\x7d\xcd\x38\xdd\xc5\x20\xb4\xc5\x6e\x24\x2d\x4f\x31\xec\xa0\xd4\xb6\x72\xed\x4c\x8d\xc5\x7a\x74\x76\x46\xfa\x52\x78\x4f\x87\xe4\xeb\xeb\xd2\xdb\x3c\xc8\xce\xed\x37\x49\xb9\xc3\x31\xb6\x43\x47\xe8\x89\xc5\x8b\x4a\xaa\xb1\x6c\x2f\x2d\xb0\x27\x3d\x11\x85\x4c\xd0\xf8\x40\x0c\xa6\x7c\xa2\x5c\xaa\xf5\x46\xe4\x14\xd9\xed\x12\x16\x26\x4d\x3c\x06\x21\x57\xac\x13\x04\xa1\xab\xee\x66\xf9\x36\x5b\xaf\x1b\x44\x61\x99\x8c\xe6\x62\xe5\xcb\xae\x3e\xeb\x0e\x26\xb8\x64\xcc\x62\x0d\xf3\x92\x97\x00\xe7\xd1\x6c\x13\xa3\xf8\x50\xa7\x53\xbc\xce\x53\xf3\x10\x42\x0a\xee\x46\xc3\x60\x32\x0a\x86\x7e\x97\xec\x9e\x7e\x17\xb0\xd5\x14\x01\xdc\xfe\xb2\xce\x86\x71\x3e\x31\xab\xe6\xb7\xe1\xa9\x21\xd3\x6a\x73\xce\xa2\x8b\xd8\x77\xa6\xa6\x0a\xfd\x78\xc1\x32\x45\x27\x46\x15\x4c\x7b\x32\xe7\x39\x3a\x08\xf1\x2b\xe9\x88\x4c\x2e\x87\x6f\xb0\x40\x3a\x45\xc7\x9b\xba\x16\x25\xa2\x55\x79\x34\x5c\xb6\x7e\x5f\xce\x75\xff\x6e\xcb\xb4\x31\x49\x29\x1c\x3d\xc7\x90\xac\xbb\xcc\x7e\xf8\xf2\xf8\xed\xe7\xaf\x1f\x1e\x9f\xee\x7f\x7a\x3b\xf9\xf6\xbf\x76\x1f\xde\x3d\x3e\xfe\xfe\xe5\xeb\xfd\xd3\xc7\x4f\x9f\x3f\xbc\x2d\x79\x08\xe5\xd4\x6f\xf9\xba\x49\x7a\x4e\x9c\x97\xa7\xdc\xfd\xf8\xc3\xff\xa7\xc7\x91\x9e\x6d\xc8\x7e\xbf\x28\x94\x44\x2b\xfc\x89\xd5\xfb\x5f\xef\x57\x37\x58\xf5\xf5\x93\x17\x26\xe3\xce\x2b\xfc\xf5\xa2\xf2\x41\x89\x8f\xa6\xad\xf0\xbf\x5b\xb9\xe4\xfa\x8e\xe2\xa0\x15\xee\x2e\x31\x26\x65\x4f\x52\xe1\xae\x58\xff\x9b\xd9\x4c\x2b\xbd\x2f\x4b\xe0\x8b\x29\xe6\xb6\xd2\x07\xb3\xc2\x95\x13\x8b\xe2\x9f\x00\x00\x00\xff\xff\xf7\x05\x81\x21\x7e\x06\x00\x00")

func composeYamlTmplBytes() ([]byte, error) {
	return bindataRead(
		_composeYamlTmpl,
		"compose.yaml.tmpl",
	)
}

func composeYamlTmpl() (*asset, error) {
	bytes, err := composeYamlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compose.yaml.tmpl", size: 1662, mode: os.FileMode(438), modTime: time.Unix(1752999846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configmapYamlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xe5\xca\xce\xcc\x4b\xb1\x52\x70\xce\xcf\x4b\xcb\x4c\xf7\x4d\x2c\xe0\xe5\xca\x4d\x2d\x49\x4c\x49\x2c\x49\xb4\xe2\xe5\x52\x50\xc8\x4b\xcc\x4d\xb5\x52\xa8\xae\x56\xd0\x73\x2c\x28\xf0\x4b\xcc\x4d\x55\xa8\xad\xd5\x4d\x06\x2b\x86\x49\x17\x17\x24\x26\x43\xd5\xf8\xc1\xb8\x0a\xb5\xb5\xbc\x5c\x70\x43\x5c\x23\x1c\x7d\x03\x7c\x5c\xe3\x5d\xfd\xc2\xac\x14\x94\x32\x52\x73\x72\xf2\x95\x78\xb9\x00\x01\x00\x00\xff\xff\x9b\x5e\xf3\x47\x89\x00\x00\x00")

func configmapYamlTmplBytes() ([]byte, error) {
	return bindataRead(
		_configmapYamlTmpl,
		"configmap.yaml.tmpl",
	)
}

func configmapYamlTmpl() (*asset, error) {
	bytes, err := configmapYamlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configmap.yaml.tmpl", size: 137, mode: os.FileMode(438), modTime: time.Unix(1752999922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentYamlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x6a\xc3\x30\x10\x84\xef\x06\xbf\xc3\xbe\x40\x5a\x72\xd5\xad\x50\x0a\x85\x34\x94\x1e\x7a\xdf\x2a\x93\x54\x54\x3f\x8b\xb4\x04\x4a\xc8\xbb\x17\xd9\x56\x70\x8d\x33\x27\xef\x8e\xe7\xdb\x11\x8b\xfb\x44\x2e\x2e\x45\x43\x2c\x52\x1e\xcf\xdb\xbe\xfb\x71\xf1\x60\xe8\x19\xe2\xd3\x6f\x40\xd4\xbe\x0b\x50\x3e\xb0\xb2\xe9\x3b\xa2\xc8\x01\x86\x2e\x17\x7a\x78\x12\xd9\x73\x00\x5d\xaf\x6d\x5f\x84\xed\x64\xee\xdb\x38\xd8\x45\x60\x87\x74\x86\x78\x67\xb9\x18\xda\xd6\xb1\xc0\xc3\x6a\xca\x83\x47\x14\x58\xed\xf7\x8e\xbf\xe0\xcb\xb4\xa1\xda\x6b\xed\x9c\x22\x88\x67\x45\x4b\xce\x2b\x56\xf9\xff\x94\xbb\x1c\xa2\x5b\xb7\x2a\x9b\xa2\xb2\x8b\xc8\xf3\xe8\xe6\xee\xa3\x9b\x5c\xe0\xd3\xf4\xc3\x6b\xfd\x5c\xd8\x92\xb2\xce\x81\x23\xf4\x76\xeb\x3d\x65\x1d\xc3\x3b\x57\x14\xb1\xce\x0b\x02\xe2\xf9\x25\xa7\xb0\xc6\x38\xba\xd3\x1b\xcb\x07\x8e\x0b\xb3\x6a\xad\xf7\x66\xcc\xf4\xdd\x5f\x00\x00\x00\xff\xff\x6d\xc2\x7f\x36\xfe\x01\x00\x00")

func deploymentYamlTmplBytes() ([]byte, error) {
	return bindataRead(
		_deploymentYamlTmpl,
		"deployment.yaml.tmpl",
	)
}

func deploymentYamlTmpl() (*asset, error) {
	bytes, err := deploymentYamlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployment.yaml.tmpl", size: 510, mode: os.FileMode(438), modTime: time.Unix(1753001567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ingressYamlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x6a\x84\x40\x0c\xc7\xef\x82\xef\x90\x17\x70\x96\xde\xca\xdc\x7a\x2c\x94\x65\x0f\xa5\xf7\xa8\xa9\x06\x35\x33\x64\xe2\xee\x96\xc5\x77\x2f\xea\x0a\xfb\x35\xb7\xff\x47\x7e\x13\x82\x91\x7f\x48\x13\x07\xf1\x20\x64\xa7\xa0\x1d\x4b\xe3\xba\xf7\xe4\x38\xec\x8e\x6f\x79\xd6\xb1\xd4\x1e\x3e\xa5\x51\x4a\x29\xcf\x06\x32\xac\xd1\xd0\xe7\x19\x80\xe0\x40\x1e\x2e\x17\x70\x1f\x31\xee\x71\x20\x98\xa6\x82\xb7\xea\x9a\xa7\x88\xd5\xb5\xb4\xdf\x24\x4c\xd3\x1c\xa3\x48\x30\x34\x0e\x92\x16\x1c\x80\x34\x2c\x67\x77\x25\xb8\x6e\x2c\x49\x85\x8c\x96\x65\x94\x4e\xca\x46\x85\xa1\x36\x64\x1e\x76\x79\x96\x22\x55\xcb\xa4\x8e\x3d\x6d\x8c\x02\xda\x90\xec\x71\x2d\xd7\x87\x0a\xfb\xb5\x01\xd0\x9a\x45\xbf\x09\x80\x88\xd6\xa6\x1b\x3d\x43\x66\x6f\xf9\x04\x6e\xde\x6c\x7e\xff\x45\xf2\x70\x50\xfa\xe5\xf3\x7d\x5a\x62\xd5\x91\xd4\xfe\xde\x05\x48\xa4\x47\xae\xe8\xc9\x7f\x7d\xc0\xe7\x56\x0c\x6a\x2f\x86\x01\x64\x1c\x4a\xd2\x15\xf0\xc5\xc9\x48\x0e\x41\x6d\x61\xfc\x07\x00\x00\xff\xff\xbd\x92\x20\xa9\xd9\x01\x00\x00")

func ingressYamlTmplBytes() ([]byte, error) {
	return bindataRead(
		_ingressYamlTmpl,
		"ingress.yaml.tmpl",
	)
}

func ingressYamlTmpl() (*asset, error) {
	bytes, err := ingressYamlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ingress.yaml.tmpl", size: 473, mode: os.FileMode(438), modTime: time.Unix(1753001593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceYamlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8c\xcd\xaa\xc2\x40\x0c\x85\xf7\x03\xf3\x0e\x79\x81\x7b\xc1\xed\xec\xa4\x2b\x41\xca\x80\xe2\x3e\x4c\x83\x0c\xb6\x33\x21\x89\x05\x29\x7d\x77\xb1\x3f\x3b\xcd\xee\x9c\xf3\x7d\x41\xce\x37\x12\xcd\xb5\x04\x18\x0f\xde\x3d\x72\xe9\x02\x5c\x48\xc6\x9c\xc8\xbb\x81\x0c\x3b\x34\x0c\xde\x01\x14\x1c\x28\xc0\x34\xc1\xff\x91\xb9\xc5\x81\x60\x9e\xf7\x5e\x19\xd3\x36\xb6\x7b\x5c\x66\x65\x4a\x8b\xad\xd4\x53\xb2\x2a\x4b\x00\x40\xe6\x6f\xbf\xb8\x8a\xe9\x86\xfc\x01\x4b\xb5\x9a\x6a\x1f\xe0\xda\xc4\xb5\x5c\x91\x55\x3d\x67\x35\x2a\xb1\x8a\x6d\xf6\xe7\x0c\xe5\x4e\x16\x7f\x43\xf6\x62\x0a\xd0\xf4\x4f\x35\x92\x53\xf4\xee\x1d\x00\x00\xff\xff\xf3\x50\x16\x09\x04\x01\x00\x00")

func serviceYamlTmplBytes() ([]byte, error) {
	return bindataRead(
		_serviceYamlTmpl,
		"service.yaml.tmpl",
	)
}

func serviceYamlTmpl() (*asset, error) {
	bytes, err := serviceYamlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.yaml.tmpl", size: 260, mode: os.FileMode(438), modTime: time.Unix(1753001597, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".dockerignore.tmpl":   DockerignoreTmpl,
	".gitlab-ci.yml.tmpl":  GitlabCiYmlTmpl,
	"Dockerfile.tmpl":      dockerfileTmpl,
	"compose.yaml.tmpl":    composeYamlTmpl,
	"configmap.yaml.tmpl":  configmapYamlTmpl,
	"deployment.yaml.tmpl": deploymentYamlTmpl,
	"ingress.yaml.tmpl":    ingressYamlTmpl,
	"service.yaml.tmpl":    serviceYamlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".dockerignore.tmpl":   &bintree{DockerignoreTmpl, map[string]*bintree{}},
	".gitlab-ci.yml.tmpl":  &bintree{GitlabCiYmlTmpl, map[string]*bintree{}},
	"Dockerfile.tmpl":      &bintree{dockerfileTmpl, map[string]*bintree{}},
	"compose.yaml.tmpl":    &bintree{composeYamlTmpl, map[string]*bintree{}},
	"configmap.yaml.tmpl":  &bintree{configmapYamlTmpl, map[string]*bintree{}},
	"deployment.yaml.tmpl": &bintree{deploymentYamlTmpl, map[string]*bintree{}},
	"ingress.yaml.tmpl":    &bintree{ingressYamlTmpl, map[string]*bintree{}},
	"service.yaml.tmpl":    &bintree{serviceYamlTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
